// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  programs  ProgramAssignment[]
  createdPrograms Program[] @relation("ProgramCreatedBy")
}

model Program {
  id          String             @id @default(cuid())
  name        String
  year        Int
  config      Json?
  createdBy   User               @relation("ProgramCreatedBy", fields: [createdById], references: [id])
  createdById Int
  assignments ProgramAssignment[]
  years       ProgramYear[]
  groupingTypes GroupingType[]
  groupings   Grouping[]
  parties     Party[]
  status      String   @default("active")
  createdAt   DateTime           @default(now())
}

model ProgramAssignment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  program   Program  @relation(fields: [programId], references: [id])
  programId String
  role      String
  createdAt DateTime @default(now())
}

model Log {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  level     String
  source    String
  programId String
  message   String
  error     String?
}

model ProgramYear {
  id        Int      @id @default(autoincrement())
  program   Program  @relation(fields: [programId], references: [id])
  programId String
  year      Int
  startDate DateTime?
  endDate   DateTime?
  status    String   @default("active")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupings ProgramYearGrouping[]
  parties   ProgramYearParty[]
}

model GroupingType {
  id          Int      @id @default(autoincrement())
  program     Program  @relation(fields: [programId], references: [id])
  programId   String
  defaultName String
  customName  String?
  pluralName  String?
  levelOrder  Int
  isRequired  Boolean  @default(false)
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupings   Grouping[]

  @@index([programId])
}

model Grouping {
  id              Int       @id @default(autoincrement())
  program         Program   @relation(fields: [programId], references: [id])
  programId       String
  groupingType    GroupingType @relation(fields: [groupingTypeId], references: [id])
  groupingTypeId  Int
  parentGrouping  Grouping? @relation("GroupingToParent", fields: [parentGroupingId], references: [id])
  parentGroupingId Int?
  children        Grouping[] @relation("GroupingToParent")
  name            String
  status          String   @default("active")
  displayOrder    Int?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  programYears    ProgramYearGrouping[]

  @@index([programId])
  @@index([groupingTypeId])
  @@index([parentGroupingId])
}

model ProgramYearGrouping {
  id            Int         @id @default(autoincrement())
  programYear   ProgramYear @relation(fields: [programYearId], references: [id])
  programYearId Int
  grouping      Grouping    @relation(fields: [groupingId], references: [id])
  groupingId    Int
  status        String      @default("active")

  @@index([programYearId])
  @@index([groupingId])
}

model Party {
  id           Int      @id @default(autoincrement())
  program      Program  @relation(fields: [programId], references: [id])
  programId    String
  name         String
  abbreviation String?
  color        String?
  icon         String?
  status       String   @default("active")
  displayOrder Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  programYearParties ProgramYearParty[]

  @@index([programId])
}

model ProgramYearParty {
  id            Int         @id @default(autoincrement())
  programYear   ProgramYear @relation(fields: [programYearId], references: [id])
  programYearId Int
  party         Party       @relation(fields: [partyId], references: [id])
  partyId       Int
  status        String      @default("active")

  @@index([programYearId])
  @@index([partyId])
}

