openapi: 3.0.0
info:
  title: Boys State App API
  description: >
    **Disclaimer:** This project is being developed to support Boys State &
    Girls State programs affiliated with the American Legion, but is not
    created, funded, or officially supported by the American Legion. No
    endorsement or sponsorship is implied. All branding, configuration, and
    operational decisions are made independently by the appâ€™s creators and
    participating programs.


    The API provides authentication endpoints and health checks used by the Boys
    State App mobile and web clients. The following documentation describes the
    requests and responses in detail.
  version: 1.0.0
servers:
  - url: https://boysstateappservices.up.railway.app
tags:
  - name: system
    description: Endpoints for service monitoring and status
  - name: auth
    description: User registration and login
  - name: groupingTypes
    description: Manage grouping type definitions
  - name: groupings
    description: Manage program groupings
  - name: parties
    description: Manage program parties
  - name: delegates
    description: Manage program delegates
  - name: staff
    description: Manage program staff
  - name: positions
    description: Manage program positions
  - name: brandingContact
    description: Manage branding and contact details
paths:
  /health:
    get:
      tags:
        - system
      summary: Service and database status
      description: >
        Returns a simple JSON object indicating that the service is running and
        whether the database connection is healthy.
      responses:
        "200":
          description: Successful health response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Overall service status
                    example: ok
                  database:
                    type: string
                    description: Database connection status
                    example: ok
              example:
                status: ok
                database: ok
      security:
        - bearerAuth: []
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: >
        Creates a new user account using an email and password. The email must
        be unique. A successful request returns a confirmation message.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  description: Plain text password to register
                  example: mySecret
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
              example:
                message: User created
        "400":
          description: Email already exists or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User already exists
              example:
                error: User already exists
  /login:
    post:
      tags:
        - auth
      summary: Authenticate an existing user
      description: >
        Checks the provided email and password and returns a success message
        when the credentials are valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Registered email address
                  example: user@example.com
                password:
                  type: string
                  description: Account password
                  example: mySecret
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token containing user id and email (expires
                      after 30 minutes)
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MT
                      Y4NTg0OTc1NX0.LXrlo3wrX7rQiGZnYuxRKgXUxRvQPgFP5yxv1rdqe8E
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MT
                  Y4NTg0OTc1NX0.LXrlo3wrX7rQiGZnYuxRKgXUxRvQPgFP5yxv1rdqe8E
        "400":
          description: Missing credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email and password required
              example:
                error: Email and password required
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid credentials
              example:
                error: Invalid credentials
        "429":
          description: Too many failed login attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Too many login attempts
              example:
                error: Too many login attempts
  /logs:
    post:
      tags:
        - system
      summary: Submit a log message
      description: >
        Allows authenticated clients to send a log entry associated with a
        program. The server stores the entry for auditing and troubleshooting.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - programId
                - level
                - message
              properties:
                programId:
                  type: string
                  description: Program identifier for the log entry
                  example: abc123
                level:
                  type: string
                  description: Log level
                  enum:
                    - debug
                    - info
                    - warn
                    - error
                  example: info
                message:
                  type: string
                  description: Log message text
                  example: Something happened
                error:
                  type: string
                  description: Optional error details for error logs
                  example: Stack trace
                source:
                  type: string
                  description: Where the log originated (api or client)
                  example: client
      responses:
        "204":
          description: Log recorded
          content:
            application/json:
              example: {}
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: programId, level, and message required
              example:
                error: programId, level, and message required
      security:
        - bearerAuth: []
    get:
      tags:
        - system
      summary: Retrieve log messages
      description: >
        Returns logs filtered by program, level, source, date range, and search
        query. Results are sorted by newest first and paginated.
      parameters:
        - in: query
          name: programId
          schema:
            type: string
          description: Filter logs by program ID
        - in: query
          name: level
          schema:
            type: string
            enum:
              - debug
              - info
              - warn
              - error
          description: Log level to filter
        - in: query
          name: source
          schema:
            type: string
          description: Log source (client or api)
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date-time
          description: Include logs from this date/time (inclusive)
        - in: query
          name: dateTo
          schema:
            type: string
            format: date-time
          description: Include logs up to this date/time (inclusive)
        - in: query
          name: search
          schema:
            type: string
          description: Case-insensitive search in message, error, or source
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of records per page
      responses:
        "200":
          description: List of logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        timestamp:
                          type: string
                          format: date-time
                          example: 2025-06-01T10:20:30Z
                        programId:
                          type: string
                          example: abc123
                        level:
                          type: string
                          enum:
                            - debug
                            - info
                            - warn
                            - error
                        message:
                          type: string
                          example: Database crashed
                        error:
                          type: string
                          example: Stack trace here
                        source:
                          type: string
                          example: api
                  page:
                    type: integer
                    example: 1
                  pageSize:
                    type: integer
                    example: 50
                  total:
                    type: integer
                    example: 244
              example:
                logs:
                  - id: 1
                    timestamp: 2025-06-01T10:20:30Z
                    programId: abc123
                    level: ""
                    message: Database crashed
                    error: Stack trace here
                    source: api
                page: 1
                pageSize: 50
                total: 244
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid level
              example:
                error: Invalid level
      security:
        - bearerAuth: []
  /audit-logs:
    post:
      tags:
        - system
      summary: Create an audit log entry
      description: Records an audit entry describing a change made to a database
        record. Used for compliance tracking.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tableName
                - recordId
                - userId
                - action
              properties:
                tableName:
                  type: string
                recordId:
                  type: string
                userId:
                  type: integer
                action:
                  type: string
                changes:
                  type: object
      responses:
        "201":
          description: Created audit log
          content:
            application/json:
              example: {}
        "400":
          description: Invalid request
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - system
      summary: List audit log entries
      description: Returns audit entries filtered by table, record, user, or date
        range. Results are paginated and sorted by newest first.
      parameters:
        - in: query
          name: tableName
          schema:
            type: string
        - in: query
          name: recordId
          schema:
            type: string
        - in: query
          name: userId
          schema:
            type: integer
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date-time
        - in: query
          name: dateTo
          schema:
            type: string
            format: date-time
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
      responses:
        "200":
          description: List of audit logs
          content:
            application/json:
              example: {}
        "400":
          description: Invalid request
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /programs:
    get:
      tags:
        - programs
      summary: List all programs
      description: Returns every program in the system. The caller must be
        authenticated but does not need to belong to any specific program.
      responses:
        "200":
          description: Array of programs
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    post:
      tags:
        - programs
      summary: Create a new program
      description: Creates a program record and assigns the requesting user as an
        admin of that program.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - year
              properties:
                name:
                  type: string
                  example: Texas Boys State 2025
                year:
                  type: integer
                  example: 2025
      responses:
        "201":
          description: Program created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  year:
                    type: integer
                  createdBy:
                    type: integer
                  roleAssigned:
                    type: string
                    example: admin
              example:
                id: ""
                name: ""
                year: 0
                createdBy: 0
                roleAssigned: admin
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: ""
      example: name and year required
      security:
        - bearerAuth: []
  /programs/{id}:
    get:
      tags:
        - programs
      summary: Get program details
      description: Retrieves the program record specified by `id`. The requester must
        be assigned to the program or an admin.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Program object
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    put:
      tags:
        - programs
      summary: Update program
      description: Updates basic program information such as name, year, or status.
        Only program admins may call this endpoint.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                year:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated program
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - programs
      summary: Retire program
      description: Marks the program as retired without deleting the data. Only admins
        can retire a program.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Program retired
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /api/branding-contact/{programId}:
    get:
      tags:
        - brandingContact
      summary: Retrieve branding and contact configuration
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Branding/contact config
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    post:
      tags:
        - brandingContact
      summary: Create or update branding/contact configuration
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Updated configuration
          content:
            application/json:
              example: {}
        "201":
          description: Created configuration
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    put:
      tags:
        - brandingContact
      summary: Create or update branding/contact configuration
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Updated configuration
          content:
            application/json:
              example: {}
        "201":
          description: Created configuration
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /programs/{programId}/users:
    post:
      tags:
        - programs
      summary: Assign user to program
      description: Adds a user to a program with the specified role. Caller must be a
        program admin.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: integer
                role:
                  type: string
                  example: counselor
      responses:
        "201":
          description: User assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  programId:
                    type: string
                  userId:
                    type: integer
                  role:
                    type: string
                  status:
                    type: string
                    example: assigned
              example:
                programId: ""
                userId: 0
                role: ""
                status: assigned
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: ""
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - programs
      summary: List users in program
      description: Returns all users assigned to the program along with their roles.
        Requires admin access to the program.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      responses:
        "200":
          description: Array of users and roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: integer
                    role:
                      type: string
              example:
                - userId: 0
                  role: ""
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /programs/{programId}/years:
    post:
      tags:
        - programs
      summary: Create program year
      description: Adds a new year entry to the program. This is typically used at the
        start of a new session. Admin privileges are required.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - year
              properties:
                year:
                  type: integer
                  example: 2025
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                status:
                  type: string
                notes:
                  type: string
      responses:
        "201":
          description: Created program year
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - programs
      summary: List program years
      description: Returns all years that have been configured for the program.
        Requires membership in the program.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      responses:
        "200":
          description: Array of program years
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /programs/{programId}/grouping-types:
    post:
      tags:
        - groupingTypes
      summary: Add grouping type
      description: Creates a new grouping type for organizing delegates (for example,
        city, county, or district). Admin privileges are required.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - defaultName
                - levelOrder
              properties:
                defaultName:
                  type: string
                customName:
                  type: string
                pluralName:
                  type: string
                levelOrder:
                  type: integer
                isRequired:
                  type: boolean
      responses:
        "201":
          description: Created grouping type
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - groupingTypes
      summary: List grouping types
      description: Lists all grouping type definitions for the program in ascending
        order by level. Requires program membership.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      responses:
        "200":
          description: Array of grouping types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /grouping-types/{id}:
    put:
      tags:
        - groupingTypes
      summary: Update grouping type
      description: Modifies the grouping type definition such as its display name or
        whether it is required. Only program admins can update a grouping type.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customName:
                  type: string
                pluralName:
                  type: string
                levelOrder:
                  type: integer
                isRequired:
                  type: boolean
                status:
                  type: string
      responses:
        "200":
          description: Updated grouping type
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - groupingTypes
      summary: Retire grouping type
      description: Marks the grouping type as retired so it can no longer be used for
        new groupings. Only admins may retire a type.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Retired grouping type
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /programs/{programId}/groupings:
    post:
      tags:
        - groupings
      summary: Add grouping
      description: Creates a new grouping (for example a city or county) under the
        specified program. Requires admin permissions.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupingTypeId
                - name
              properties:
                groupingTypeId:
                  type: integer
                parentGroupingId:
                  type: integer
                name:
                  type: string
                displayOrder:
                  type: integer
                notes:
                  type: string
      responses:
        "201":
          description: Created grouping
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - groupings
      summary: List groupings
      description: Returns all groupings defined for the program. Caller must be a
        member of the program.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      responses:
        "200":
          description: Array of groupings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /groupings/{id}:
    put:
      tags:
        - groupings
      summary: Update grouping
      description: Updates the specified grouping's name, parent, or status. Admin
        access to the grouping's program is required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                displayOrder:
                  type: integer
                notes:
                  type: string
                parentGroupingId:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated grouping
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - groupings
      summary: Retire grouping
      description: Retires the grouping so it can no longer be assigned to delegates.
        Only program admins may perform this action.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Retired grouping
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/groupings/activate:
    post:
      tags:
        - groupings
      summary: Activate groupings for year
      description: Activates a set of groupings for the specified program year so they
        can be assigned to delegates. Requires admin rights.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupingIds
              properties:
                groupingIds:
                  type: array
                  items:
                    type: integer
      responses:
        "201":
          description: Activated groupings
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/groupings:
    get:
      tags:
        - groupings
      summary: List active groupings for year
      description: Lists the groupings that are active for the given program year.
        Membership in the program is required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of active groupings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /programs/{programId}/parties:
    post:
      tags:
        - parties
      summary: Add party
      description: Creates a political party for the program. Admin access is required.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                abbreviation:
                  type: string
                color:
                  type: string
                icon:
                  type: string
                displayOrder:
                  type: integer
      responses:
        "201":
          description: Created party
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - parties
      summary: List parties
      description: Lists all party definitions for the program. Caller must belong to
        the program.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      responses:
        "200":
          description: Array of parties
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /parties/{id}:
    put:
      tags:
        - parties
      summary: Update party
      description: Updates party details such as name, abbreviation, or icon. Only
        admins may modify parties.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                abbreviation:
                  type: string
                color:
                  type: string
                icon:
                  type: string
                displayOrder:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated party
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - parties
      summary: Retire party
      description: Marks the party as retired. Existing assignments remain but new
        ones cannot be created. Admin only.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Retired party
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/parties/activate:
    post:
      tags:
        - parties
      summary: Activate parties for year
      description: Enables a subset of parties for the given program year. Parties
        must be created first. Admin access required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - partyIds
              properties:
                partyIds:
                  type: array
                  items:
                    type: integer
      responses:
        "201":
          description: Activated parties
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/parties:
    get:
      tags:
        - parties
      summary: List active parties for year
      description: Returns parties that are active for the specified program year.
        Membership in the program is required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of active parties
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/delegates:
    post:
      tags:
        - delegates
      summary: Add delegate
      description: Creates a new delegate record for the specified program year. Admin
        access is required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - groupingId
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: integer
                groupingId:
                  type: integer
                partyId:
                  type: integer
      responses:
        "201":
          description: Delegate created
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - delegates
      summary: List delegates for year
      description: Returns all delegates registered for the given program year.
        Requires membership in the program.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of delegates
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /delegates/{id}:
    put:
      tags:
        - delegates
      summary: Update delegate
      description: Updates delegate information such as contact details or grouping
        assignment. Only program admins can update delegates.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: integer
                groupingId:
                  type: integer
                partyId:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated delegate
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - delegates
      summary: Withdraw delegate
      description: Marks the delegate as withdrawn from the program year. Admin rights
        are required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Delegate withdrawn
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/staff:
    post:
      tags:
        - staff
      summary: Add staff member
      description: Adds a staff member to the specified program year. Admin
        permissions are required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - role
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: integer
                role:
                  type: string
                groupingId:
                  type: integer
      responses:
        "201":
          description: Staff created
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - staff
      summary: List staff for year
      description: Returns all staff members assigned to the program year. Caller must
        be a program member.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of staff
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /staff/{id}:
    put:
      tags:
        - staff
      summary: Update staff member
      description: Updates staff details or role assignments. Only admins can update
        staff records.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: integer
                role:
                  type: string
                groupingId:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated staff member
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - staff
      summary: Remove staff member
      description: Removes a staff member from the program year. Admin permissions required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Staff removed
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
  /programs/{programId}/positions:
    post:
      tags:
        - positions
      summary: Add position
      description: Creates a position (such as an elected office) that delegates can
        hold. Admin access required.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                displayOrder:
                  type: integer
      responses:
        "201":
          description: Created position
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - positions
      summary: List positions
      description: Lists all position definitions for the program. Requires program
        membership.
      parameters:
        - in: path
          name: programId
          required: true
          schema:
            type: string
          description: Program ID
      responses:
        "200":
          description: Array of positions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /positions/{id}:
    put:
      tags:
        - positions
      summary: Update position
      description: Updates a position's details or display order. Only admins may
        update positions.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                displayOrder:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated position
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - positions
      summary: Retire position
      description: Retires the position so it can no longer be assigned. Admin access
        required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Retired position
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/positions:
    post:
      tags:
        - positions
      summary: Assign position to year
      description: Activates a position for a specific program year and optionally
        assigns an initial delegate.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - positionId
              properties:
                positionId:
                  type: integer
                delegateId:
                  type: integer
      responses:
        "201":
          description: Created program year position
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - positions
      summary: List program year positions
      description: Returns all position assignments for the program year. Caller must
        be a program member.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of program year positions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-year-positions/{id}:
    put:
      tags:
        - positions
      summary: Update program year position
      description: Updates the delegate or status of a program year position. Admin
        privileges required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delegateId:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated program year position
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/elections:
    post:
      tags:
        - elections
      summary: Create election
      description: Creates a new election for a position within the program year.
        Requires admin access and specifies the voting method and timeframe.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - positionId
                - groupingId
                - method
              properties:
                positionId:
                  type: integer
                groupingId:
                  type: integer
                method:
                  type: string
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
      responses:
        "201":
          description: Created election
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - elections
      summary: List elections
      description: Lists all elections configured for the given program year. Caller
        must be a program member.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of elections
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /elections/{id}:
    put:
      tags:
        - elections
      summary: Update election
      description: Updates election details such as status or end time. Only admins
        can modify elections.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
      responses:
        "200":
          description: Updated election
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - elections
      summary: Remove election
      description: Deletes an election and all associated votes. Admin only.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Removed election
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /elections/{id}/vote:
    post:
      tags:
        - elections
      summary: Cast vote
      description: Records a delegate's vote for the specified election. Voters must
        be eligible for the election.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - candidateId
                - voterId
              properties:
                candidateId:
                  type: integer
                voterId:
                  type: integer
                rank:
                  type: integer
      responses:
        "201":
          description: Vote recorded
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /elections/{id}/results:
    get:
      tags:
        - elections
      summary: Get election results
      description: Retrieves tallied results for the election. Only admins or
        authorized staff may view results.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Election results
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - positions
      summary: Remove program year position
      description: Deletes a position assignment from the program year. Only admins
        can remove assignments.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Removed program year position
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}/parents:
    post:
      tags:
        - parents
      summary: Add parent
      description: Registers a parent account for the specified program year. Admins
        use this to invite or create parent records.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: integer
      responses:
        "201":
          description: Parent created
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - parents
      summary: List parents for year
      description: Returns all parent accounts linked to delegates in the program
        year. Requires membership in the program.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Program Year ID
      responses:
        "200":
          description: Array of parents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - null
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /parents/{id}:
    put:
      tags:
        - parents
      summary: Update parent
      description: Updates parent contact information or status. Only program admins
        can update parents.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: integer
                status:
                  type: string
      responses:
        "200":
          description: Updated parent
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - parents
      summary: Remove parent
      description: Removes the parent record from the program year. Admin access required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Parent removed
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /delegate-parent-links:
    post:
      tags:
        - parents
      summary: Create delegate-parent link
      description: Links a delegate to a parent account. The caller must be an admin
        or staff member.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - delegateId
                - parentId
                - programYearId
              properties:
                delegateId:
                  type: integer
                parentId:
                  type: integer
                programYearId:
                  type: integer
      responses:
        "201":
          description: Link created
          content:
            application/json:
              example: {}
        "400":
          description: Invalid input
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /delegate-parent-links/{id}:
    put:
      tags:
        - parents
      summary: Update delegate-parent link
      description: Updates the status of an existing delegate-parent relationship.
        Admins use this to accept or revoke links.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        "200":
          description: Updated link
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /program-years/{id}:
    get:
      tags:
        - programs
      summary: Get program year
      description: Retrieves details for a specific program year including dates and
        status. Requires membership in the program.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Program year
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    put:
      tags:
        - programs
      summary: Update program year
      description: Updates program year fields such as start/end dates or status. Only
        program admins can modify a year.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                status:
                  type: string
                notes:
                  type: string
      responses:
        "200":
          description: Updated program year
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - programs
      summary: Archive program year
      description: Archives the program year, preventing further modifications. Admin only.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Archived program year
          content:
            application/json:
              example: {}
        "403":
          description: Forbidden
          content:
            application/json:
              example: {}
        "404":
          description: Not found
          content:
            application/json:
              example: {}
      security:
        - bearerAuth: []
  /user-programs/{username}:
    get:
      tags:
        - programs
      summary: List programs for a user
      description: >
        Returns programs for the specified user. If the user is assigned to a
        program named `DEVELOPMENT`, all programs are returned with the role
        `developer` for any program to which the user is not explicitly
        assigned. Each item includes the program id, name, and role.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Email or username of the user
      responses:
        "200":
          description: List of programs
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: User email or username
                    example: jane.doe
                  programs:
                    type: array
                    items:
                      type: object
                      properties:
                        programId:
                          type: string
                          example: abc123
                        programName:
                          type: string
                          example: Boys State Texas
                        role:
                          type: string
                          example: admin
              example:
                username: jane.doe
                programs:
                  - programId: abc123
                    programName: Boys State Texas
                    role: admin
        "400":
          description: Username required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username required
              example:
                error: Username required
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
              example:
                error: User not found
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
